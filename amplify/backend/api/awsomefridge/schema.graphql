type Fridgebase {
	pk: String!
	sk: String!
}

type FridgebaseConnection {
	items: [Fridgebase]
	nextToken: String
}

type Item @model @auth(rules: [{ allow: public }]){
	pk: String
	sk: String
	UPC: String
	name: String
	category: String
	calories: String
	img_url: String
	exp_date: Int
	quantity: Int
}

type Items {
	pk: ID!
	items: [Item]
}

type User @model @auth(rules: [{ allow: public }]){
	pk: ID!
	username: String!
	password: String!
	email: String!
}

input addItemInput {
	pk: String!
	UPC: String
	name: String!
	category: String
	calories: String
	img_url: String
	exp_date: Int
	quantity: Int
}

input deleteItemInput {
	pk: String!
	sk: String!
}

input updateItemInput {
	pk: String!
	sk: String!
	name: String
	exp_date: Int
	quantity: Int
}

type Mutation {
	addItem(input: addItemInput!): Fridgebase
	addItemByUPC(uid: String!, upc: String!): Item
	editItem(input: updateItemInput!): Fridgebase
	removeItem(input: deleteItemInput!): Fridgebase
}

type Query {
	getUserItems(pk: String!): [Item]
}

type Subscription {
	onCreateFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["addItem"])
	onUpdateFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["editItem"])
	onDeleteFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["removeItem"])
}