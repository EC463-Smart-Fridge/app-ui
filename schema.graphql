type Fridgebase {
	pk: String!
	sk: String!
}

type FridgebaseConnection {
	items: [Fridgebase]
	nextToken: String
}

type Item @model{
	pk: String
	sk: String
	UPC: String
	name: String
	category: String
	calories: String
	img_url: String
	exp_date: Int
	quantity: Int
}

type Items {
	pk: ID!
	items: [Item]
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
}

input TableFridgebaseFilterInput {
	pk: TableStringFilterInput
	sk: TableStringFilterInput
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type User @model {
	pk: ID!
	username: String!
	password: String!
	email: String!
}

input addItemInput {
	pk: String!
	UPC: String
	name: String!
	category: String
	calories: String
	img_url: String
	exp_date: Int
	quantity: Int
}

input deleteItemInput {
	pk: String!
	sk: String!
}

input updateItemInput {
	pk: String!
	sk: String!
	name: String
	exp_date: Int
	quantity: Int
}

type Mutation {
	addItem(input: addItemInput!): Fridgebase
	addItemByUPC(uid: String!, upc: String!): Item
	editItem(input: updateItemInput!): Fridgebase
	removeItem(input: deleteItemInput!): Fridgebase
}

type Query {
	getUserItems(pk: String!): [Item]
	getFridgebase(pk: String!, sk: String!): Fridgebase
	listFridgebases(filter: TableFridgebaseFilterInput, limit: Int, nextToken: String): FridgebaseConnection
}

type Subscription {
	onCreateFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["addItem"])
	onUpdateFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["editItem"])
	onDeleteFridgebase(pk: String, sk: String): Fridgebase
		@aws_subscribe(mutations: ["removeItem"])
}